<!--
 This build file contains all the different statistics and snapshot
 built by the argouml-gen project.
 
 To take part in this you:
 1. Install cvs.
 2. Check out this file:
     cvs co -d :pserver:guest@cvs.tigris.org:/cvs argouml-gen/build.xml
    [TODO: This doesn't work. You must checkout more.]
 3. Install ant.
    [TODO: This isn't needed. Ant is provided in the more to check out]
 4. Run through everything:
     ant -logger org.apache.tools.ant.XmlLogger -logfile www/logs/<your tigris id>/log00001.xml
 5. Decide on what parts of this you are willing to run.
    Default is everything.
    Options are:
      javadoc
      daily build (not yet implemented)
      commit statistics (NYI)
      issuezilla statistics (NYI)
      mailinglist statistics (NYI)
 6. Set up the cron job to run this regularly.
 7. Apply for a role in this project.
 8. Get the role granted.
 9. Create the result directories in cvs.
10. Monitor your commits.

 The general design of these targets is that they run in a directory called
 tmp that is created on the first invocation and that can be removed at any
 time (after completion or between runs).
 All data or result is then copied to and commited somewhere in the www tree.

 Things that are snapshots from the source that depend on things like OS and 
 JDK version that are not part of neither the argouml-gen, nor the argouml
 project, are located in subdirectories in www that are instance specific
 like www/snapshots/<user>/os/jdk. These targets rely heavily on the 
 corresponding targets in argouml/src_new/build.xml.

 Things that are independant are located in directories directly under www 
 like www/issuezilla.

 Logs are located under www/logs/<user>/ and they are new for each invocation.
 -->

<project name="argouml-gen" default="all" basedir=".">
  <description>
        Build some targets in another project and save results to CVS.
    </description>
  <!-- set global properties for this build -->
  <property file="build.properties"/>
  <property name="cvs.user" value="${user.name}"/>
  <property name="cvs.root" value=":pserver:${cvs.user}@cvs.tigris.org:/cvs"/>
  <property name="project.to.build" value="argouml"/>
  <property name="working.dir" location="${basedir}/tmp"/>
  <property name="argouml.dir" location="${working.dir}/argouml"/>
  <property name="argouml.src.dir" location="${argouml.dir}/src_new"/>
  
  <property name="xsl.dir" location="${basedir}/xsl"/>

  <property name="instrument-ant.xsl" location="${xsl.dir}/instrument-ant.xsl"/>

  <target name="init">
    <!-- Common initializations. -->
    <mkdir dir="${working.dir}"/>
  </target>


  <target name="all" depends="update,report:all" description="do everything"></target>

  <target name="commit-files">
    <property name="package" value="argouml-gen/${in.todir}"/>
    <property name="to.dir" location="${in.todir}"/>
    <property name="from.dir" location="${in.fromdir}"/>
    <property name="cvs-add-ant.xsl" location="${xsl.dir}/cvs-add-ant.xsl"/>
    <property name="cvs-add-dirs-ant.xsl" location="${xsl.dir}/cvs-add-dirs-ant.xsl"/>
    <property name="cvs-remove-ant.xsl" location="${xsl.dir}/cvs-remove-ant.xsl"/>
  
    <property name="fromdir-files.xml" location="${working.dir}/fromdir-files.xml"/>
    <property name="fromdir-dirs.xml" location="${working.dir}/fromdir-dirs.xml"/>
    <property name="todir-files.xml" location="${working.dir}/todir-files.xml"/>
    <property name="todir-dirs.xml" location="${working.dir}/todir-dirs.xml"/>
    <property name="cvs-add-ant.xml" location="${working.dir}/cvs-add-ant.xml"/>
    <property name="cvs-add-dirs-ant.xml" location="${working.dir}/cvs-add-dirs-ant.xml"/>
    <property name="cvs-remove-ant.xml" location="${working.dir}/cvs-remove-ant.xml"/>

    <echo>to.dir = ${to.dir}</echo>
    <echo>from.dir = ${from.dir}</echo>

    <!-- Take care that everything in the todir is up to date -->
    <delete includeemptydirs="true" quiet="true">
      <fileset dir="${to.dir}" defaultexcludes="no"/>
    </delete>
    <echo>Updating ${to.dir}</echo>
    <cvs command="update -d"
         cvsRoot="${cvs.root}" package="${package}" dest="${basedir}/.."
         compressionlevel="9"/>
    
    <!-- Create an xml file with an overview of all files in the todir -->

    <!-- Create directory it again - in case this is the first time. -->
    <mkdir dir="${to.dir}"/>
    <cvs command="add ${to.dir}" cvsRoot="${cvs.root}"/>

    <!-- Determine which files must be removed. -->
    <fileset id="todir-files" dir="${to.dir}"/>

    <pathconvert property="todir-files.tmp" refid="todir-files" pathSep="&lt;/pathelement&gt;&lt;pathelement&gt;"/>
    <property name="todir-files-xml" value="&lt;path&gt;&lt;pathelement&gt;${todir-files.tmp}&lt;/pathelement&gt;&lt;/path&gt;"/>

    <echo file="${todir-files.xml}">${todir-files-xml}</echo>

    <!-- Create an xml file with an overview of all new files in fromdir                         -->
    <!-- Extra trick: map in the resulting xml file the fromdir directory to the todir directory -->
    <fileset id="fromdir-files" dir="${from.dir}"/>

    <pathconvert property="fromdir-files.tmp" refid="fromdir-files" pathSep="&lt;/pathelement&gt;&lt;pathelement&gt;">
      <map from="${from.dir}" to="${to.dir}"/>
    </pathconvert>
    <property name="fromdir-files-xml" value="&lt;path&gt;&lt;pathelement&gt;${fromdir-files.tmp}&lt;/pathelement&gt;&lt;/path&gt;"/>

    <echo file="${fromdir-files.xml}">${fromdir-files-xml}</echo>

    <!-- Create an xml file with an overview of all directories in fromdir                       -->
    <!-- Extra trick: map in the resulting xml file the fromdir directory to the todir directory -->
    <dirset id="fromdir-dirs" dir="${from.dir}"/>

    <pathconvert property="fromdir-dirs.tmp" refid="fromdir-dirs" pathSep="&lt;/pathelement&gt;&lt;pathelement&gt;">
      <map from="${from.dir}" to="${to.dir}"/>
    </pathconvert>
    <property name="fromdir-dirs-xml" value="&lt;path&gt;&lt;pathelement&gt;${fromdir-dirs.tmp}&lt;/pathelement&gt;&lt;/path&gt;"/>

    <echo file="${fromdir-dirs.xml}">${fromdir-dirs-xml}</echo>

    <!-- Create an xml file with an overview of all directories in todir                         -->
    <dirset id="todir-dirs" dir="${to.dir}"/>

    <pathconvert property="todir-dirs.tmp" refid="todir-dirs" pathSep="&lt;/pathelement&gt;&lt;pathelement&gt;"/>
    <property name="todir-dirs-xml" value="&lt;path&gt;&lt;pathelement&gt;${todir-dirs.tmp}&lt;/pathelement&gt;&lt;/path&gt;"/>

    <echo file="${todir-dirs.xml}">${todir-dirs-xml}</echo>

    <!-- Create Ant scripts -->
    
    <style in="${fromdir-files.xml}" out="${cvs-add-ant.xml}" style="${cvs-add-ant.xsl}">
      <param name="todir" expression="${todir-files.xml}"/>
    </style>
    
    <style in="${fromdir-dirs.xml}" out="${cvs-add-dirs-ant.xml}" style="${cvs-add-ant.xsl}">
      <param name="todir" expression="${todir-dirs.xml}"/>
    </style>

    <style in="${todir-files.xml}" out="${cvs-remove-ant.xml}" style="${cvs-remove-ant.xsl}">
      <param name="fromdir" expression="${fromdir-files.xml}"/>
    </style>

    <!-- Remove obsolete files from CVS -->

    <ant antfile="${cvs-remove-ant.xml}"/>

    <!-- Make new version of the todir -->

    <copy todir="${to.dir}" overwrite="true">
      <fileset dir="${from.dir}"/>
    </copy>
    
    <!-- Add new files to CVS -->
    <ant antfile="${cvs-add-dirs-ant.xml}"/>
    <ant antfile="${cvs-add-ant.xml}"/>
    
    <!-- Commit it all -->
    <echo>Commiting: ${in.message}</echo>
    <cvs command="commit -m&quot;${in.message}&quot;" dest="${to.dir}" cvsRoot="${cvs.root}"/>
  </target>

  <!-- TO BE REMOVED -->
  <target name="testing-commit-files" depends="init">
    <echo>CVSROOT is ${cvs.root}</echo>
    <property name="dir" value="${working.dir}/testing"/>
    <!--copy todir="${dir}" file="build.xml"/-->

    <antcall target="commit-files">
      <param name="in.todir" value="www/michiel/testing"/>
      <param name="in.fromdir" value="${dir}"/>
      <param name="in.message" value="Updates."/>
    </antcall>

    <!--cvschangelog cvsRoot="${cvs.root}" dir="${basedir}" destfile="changelog.xml"/-->
  </target>


  <!-- ================================================================ -->
  <!-- Things that depend on the source of ArgoUML                      -->
  <!-- ================================================================ -->

  <target name="update" depends="init" description="update the project from CVS">
    <echo>CVSROOT is ${cvs.root}</echo>
    <cvs cvsRoot="${cvs.root}" dest="${working.dir}" package="argouml/src"/>
    <cvs cvsRoot="${cvs.root}" dest="${working.dir}" package="argouml/src_new"/>
    <cvs cvsRoot="${cvs.root}" dest="${working.dir}" package="argouml/tests"/>
    <cvs cvsRoot="${cvs.root}" dest="${working.dir}" package="argouml/lib"/>
    <cvs cvsRoot="${cvs.root}" dest="${working.dir}" package="argouml/modules"/>
    <cvs cvsRoot="${cvs.root}" dest="${working.dir}" package="argouml/tools"/>
  </target>

  <target name="clean" description="remove all generated reports">
    <ant dir="${argouml.src.dir}" antfile="build-reports.xml" target="clean"/>
  </target>
  
  <target name="init-reports">
    <copy file="build-reports.xml" todir="${argouml.src.dir}" overwrite="true"/>
    <copy file="reporting.properties" todir="${argouml.src.dir}" overwrite="true"/>

<!--
    <copy file="${instrument-ant.xsl}" todir="${argouml.src.dir}/xsl" overwrite="true"/>

    <copy todir="${argouml.dir}/tools">
      <fileset dir="tools">
        <include name="**"/>
        <exclude name="CVS/**"/>
        <exclude name="CVS"/>
      </fileset>
    </copy>
 -->
  </target>
  
  <target name="report:all" 
    depends="init-reports,report:junit,report:checkstyle,report:jcoverage,report:jdepend,report:javadocs,report:findbugs" 
    description="generate reports"/>

  <target name="report:jcoverage" depends="init-reports" description="generate jcoverage reports">
    <ant dir="${argouml.src.dir}" antfile="build-reports.xml" target="report:jcoverage"/>
  </target>

  <target name="commit:jcoverage" description="commit the last generated report">
    <tstamp/>
    <antcall target="commit-files">
      <param name="in.todir" value="www/reports/jcoverage"/>
      <param name="in.fromdir" value="${working.dir}/argouml/build/reports/jcoverage"/>
      <param name="in.message" value="JCoverage reports of ${TODAY}."/>
    </antcall>
  </target>

  <target name="report:jdepend" depends="init-reports" description="generate jdepend reports">
    <ant dir="${argouml.src.dir}" antfile="build-reports.xml" target="report:jdepend"/>
  </target>

  <target name="commit:jdepend" description="commit the last generated report">
    <tstamp/>
    <antcall target="commit-files">
      <param name="in.todir" value="www/reports/jdepend"/>
      <param name="in.fromdir" value="${working.dir}/argouml/build/reports/jdepend"/>
      <param name="in.message" value="JDepend reports of ${TODAY}."/>
    </antcall>
  </target>
  
  <target name="report:checkstyle" depends="init-reports" description="generate checkstyle reports">
    <ant dir="${argouml.src.dir}" antfile="build-reports.xml" target="report:checkstyle"/>
  </target>

  <target name="commit:checkstyle" description="commit the last generated report">
    <tstamp/>
    <antcall target="commit-files">
      <param name="in.todir" value="www/reports/checkstyle"/>
      <param name="in.fromdir" value="${working.dir}/argouml/build/reports/checkstyle"/>
      <param name="in.message" value="Checkstyle reports of ${TODAY}."/>
    </antcall>
  </target>
  
  <target name="report:junit" depends="init-reports" description="generate junit reports">
    <ant dir="${argouml.src.dir}" antfile="build-reports.xml" target="report:junit"/>
  </target>

  <target name="commit:junit" description="commit the last generated report">
    <tstamp/>
    <antcall target="commit-files">
      <param name="in.todir" value="www/reports/junit"/>
      <param name="in.fromdir" value="${working.dir}/argouml/build/reports/junit"/>
      <param name="in.message" value="JUnit reports of ${TODAY}."/>
    </antcall>
  </target>

  <target name="report:javadocs" depends="init-reports" description="generate javadocs reports">
    <ant dir="${argouml.src.dir}" antfile="build-reports.xml" target="report:javadocs"/>
  </target>

  <target name="commit:javadocs" description="commit the last generated report">
    <tstamp/>
    <antcall target="commit-files">
      <param name="in.todir" value="www/reports/javadocs"/>
      <param name="in.fromdir" value="${working.dir}/argouml/build/reports/javadocs"/>
      <param name="in.message" value="Javadocs of ${TODAY}."/>
    </antcall>
  </target>

  <target name="report:findbugs" depends="init-reports" description="generate FindBug reports">
    <ant dir="${argouml.src.dir}" antfile="build-reports.xml" target="report:findbugs"/>
  </target>

  <target name="commit:findbugs" description="commit the last generated report">
    <tstamp/>
    <antcall target="commit-files">
      <param name="in.todir" value="www/reports/findbugs"/>
      <param name="in.fromdir" value="${working.dir}/argouml/build/reports/findbugs"/>
      <param name="in.message" value="FindBugs of ${TODAY}."/>
    </antcall>
  </target>

  <!-- ================================================================ -->
  <!-- Statistics things                                                -->
  <!-- ================================================================ -->

  <target name="stats-issuezilla" depends="init"></target>

  <target name="stats-commit" depends="init"></target>

  <target name="stats-members" depends="init"></target>

  <target name="stats-mailinglist" depends="init"></target>

    <path id="jcoverage">
    <fileset dir="${jcoverage.dir}">
      <include name="**/jcoverage.jar"/>
    </fileset>
  </path>

</project>
