pipeline {
  options {
    buildDiscarder(logRotator(numToKeepStr: '10', daysToKeepStr: '100'))
    disableConcurrentBuilds()
  }
  triggers {
    pollSCM('@hourly')
    snapshotDependencies()
    cron('@monthly')
  }
  agent {
    docker {
      image 'maven:3-ibmjava-8'
      args '-v maven-repo:/var/maven/.m2 -e MAVEN_CONFIG=/var/maven/.m2'
    }
  }
  stages {
    stage('checkout') {
      steps {
        waitForNetwork()
        timeout(time: 1, unit: 'HOURS') {
          checkout scm
        }
      }
    }
    stage('site') {
      steps {
        retry(10) { // site-deploy fails sometimes
          waitForNetwork()
          timeout(time: 10, unit: 'HOURS') {
            withMaven(mavenSettingsConfig: 'github',
                      options: [junitPublisher(disabled: true,
                                               healthScaleFactor: 0.0),
                                jacocoPublisher(disabled: true)]) {
              sh '$MVN_CMD -Duser.home=/var/maven -B clean test site-deploy'
            }
          }
        }
      }
    }
    stage('deploy') {           // Also test and install.
      steps {
        waitForNetwork()
        timeout(time: 3, unit: 'HOURS') {
          withMaven(mavenSettingsConfig: 'sonatype') {
            sh '$MVN_CMD -Duser.home=/var/maven -B test install deploy'
          }
        }
      }
    }
  }
  post {
    always {
      cleanWs cleanWhenAborted: false,
              cleanWhenFailure: false,
              cleanWhenNotBuilt: false,
              cleanWhenUnstable: false,
              deleteDirs: true,
              notFailBuild: true,
              patterns: [[pattern: 'target/**', type: 'INCLUDE']]
    }
  }
}

def waitForNetwork() {
  waitUntil {
    sleep 3
    return sh(returnStatus: true, script: 'curl https://github.com > /dev/null') == 0
  }
}
